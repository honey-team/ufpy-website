{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>ufpy</code> package","text":"","tags":["information"]},{"location":"#introduction","title":"Introduction","text":"<p>Ufpy (Useful Python) - is a package for simplifying Python programs using many useful features.</p> <p>Now Ufpy has these features:</p> <ul> <li><code>UDict</code>.</li> <li><code>UStack</code>.</li> <li>Generators of classes methods:<ul> <li><code>cmp_generator</code></li> <li><code>r_generator</code></li> <li><code>i_generator</code></li> </ul> </li> <li>many protocols for type hinting.</li> <li>many type alias for type hinting.</li> </ul>","tags":["information"]},{"location":"#installing","title":"Installing","text":"<p>To install <code>ufpy</code>, you need <code>python 3.12+</code> and <code>pip</code>. After installing, use this command in your <code>cmd</code>/<code>bash</code> terminal:</p> You have one python versionSeveral versions <pre><code>pip install ufpy\n# or\npython -m pip install ufpy\n# or\npy -m pip install ufpy\n</code></pre> <pre><code>python -3.12 -m pip install ufpy\n# or\npy -3.12 -m pip install ufpy\n</code></pre>","tags":["information"]},{"location":"#importing-and-writing-some-code","title":"Importing and writing some code","text":"<p>After installing, you can use <code>ufpy</code> package in all your projects with <code>3.12+</code> python version. Just import <code>ufpy</code> or import certain classes, functions and variables.</p> <pre><code>import ufpy\nfrom ufpy import UDict\n</code></pre> <p>Enjoy!</p>","tags":["information"]},{"location":"#about-the-site","title":"About the site","text":"<p>Site was made using <code>mkdocs</code> with <code>mkdocs material</code> theme. You can use search: just click <code>Search</code> text input at the top of the page or use the S or F hotkeys. You can switch themes using the button on the left and access the <code>ufpy</code> repository using the button on the right.</p>","tags":["information"]},{"location":"#contribute","title":"Contribute","text":"<p>You can also contribute to <code>ufpy</code> package or <code>ufpy</code> docs site. Just  go to <code>ufpy</code> repository using button in right-top of page. For contributing to site you can go to <code>ufpy-website</code> repository.</p>","tags":["information"]},{"location":"generators/","title":"Generators","text":"","tags":["useful feature"]},{"location":"type_checking/protocols/","title":"Protocols","text":"","tags":["type check"]},{"location":"type_checking/type_alias/","title":"Type alias","text":"","tags":["type check"]},{"location":"useful_classes/udict/","title":"<code>UDict</code> class","text":"<p>UDict as generic</p> <p>You can use <code>UDict</code> as <code>Generic</code>, because of it, there are 3 <code>TypeVar</code>s: KT, VT, CDV.</p> <p>KT and VT is key type and value type. In inbuilt <code>dict</code> there are KT and VT type vars. CDV is class defaul value.</p> <p>In this documentation KT, VT and CDV will be using in methods.</p>","tags":["useful class"]},{"location":"useful_classes/udict/#class-udictkt-vt-cdv","title":"class UDict[KT, VT, CDV]","text":"<pre><code>class UDict(dictionary: AnyDict[KT, VT]) # (1)!\nclass UDict(dictionary: AnyDict[KT, VT], *, default: CDV)\nclass UDict(**kwargs: VT)\nclass UDict(*, default: CDV, **kwargs: VT)\n</code></pre> <ol> <li> <p><code>AnyDict[KT, VT] = LikeDict[KT, VT] | dict[KT, VT]</code>. In UDict </p> <p>Note</p> <p><code>LikeDict[KT, VT]</code> is type which has <code>__getitem__</code>, <code>__setitem__</code>, <code>__delitem__</code> and <code>get()</code> methods. <code>UDict</code> is <code>LikeDict</code>.</p> <p>Read about AnyDict and LikeDict</p> </li> </ol> <p>Create UDict object. If <code>default</code>, when not existent keys is given in getting item, method will return <code>default</code>.</p> <p>Example</p> <pre><code>d = UDict(hello=world, hi=python, default=10)\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#property-settable-dictionary-dictkt-vt","title":"(property, settable) dictionary: dict[KT, VT]","text":"<p>UDict's dictionary.</p> <p>Example</p> <pre><code>print(d.dictionary)\nd.dictionary = {4: 'world'}\n</code></pre> <p>Tip</p> <p>You can use UDict to set dictionary</p> <p>Example</p> <pre><code>d.dictionary = UDict({1: 7})\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#property-settable-keys-listkt","title":"(property, settable) keys: list[KT]","text":"<p>UDict's keys</p> <p>Example</p> <pre><code>print(d.keys)\nd.keys = [1, 2]\n</code></pre> <p>Tip</p> <p>You can use tuples to set keys</p> <p>Example</p> <pre><code>d.keys = 1, 2\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#property-settable-values-listvt","title":"(property, settable) values: list[VT]","text":"<p>UDict's values</p> <p>Example</p> <pre><code>print(d.values)\nd.values = [7, 2]\n</code></pre> <p>Tip</p> <p>You can use tuples to set values</p> <p>Example</p> <pre><code>d.values = 7, 2\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#property-settable-items-listtuplekt-vt","title":"(property, settable) items: list[tuple[KT, VT]]","text":"<p>UDict's items.</p> <p>Example</p> <pre><code>print(d.items)\nd.items = [(1, 7), (2, 2)]\n</code></pre> <p>Tip</p> <p>You can use tuples to set items or you can use tuples or lists with lists</p> <p>Example</p> <pre><code>d.items = (1, 7), (2, 2)\nd.items = [1, 7], [2, 2]\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#property-settable-default-cdv","title":"(property, settable) default: CDV","text":"<p>UDict's default value</p> <p>Example</p> <pre><code>print(d.default)\nd.default = 'null'\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#reverse-udictkt-vt-cdv","title":"reverse() -&gt; UDict[KT, VT, CDV]","text":"<p>Reverses UDict and returns it. (1)</p> <ol> <li> <p>How UDict is being reversing?</p> <p>Just is being reversing items <code>u{'hello': 1, 'hi': 2}</code> -&gt; <code>u{'hi': 2, 'hello': 1}</code> (reversed)</p> </li> </ol> <p>Warning</p> <p><code>reverse()</code> edits UDict. If you don't want to reverse UDict use <code>reversed()</code> method instead.</p> <p>Example</p> <pre><code>d.reverse()\nprint(d) # prints reversed UDict\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#reversed-udictkt-vt-cdv","title":"reversed() -&gt; UDict[KT, VT, CDV]","text":"<p>Returns reversed UDict</p> <p>Example</p> <pre><code>print(d.reversed())\n</code></pre> <p>Get reversed UDict with inbuilt <code>reversed()</code> and <code>~</code> operator</p> <p>You can get reversed UDict with inbuilt <code>reversed()</code> and with invert operator (<code>~</code>).</p> <p>Example</p> <pre><code>print(~d)\nprint(reversed(d))\nprint(d.reversed() == reversed(d)) # True\n</code></pre> <p>Read more about <code>reversed()</code> and <code>~</code> support in UDict</p>","tags":["useful class"]},{"location":"useful_classes/udict/#sort-udictkt-vt-cdv","title":"sort() -&gt; UDict[KT, VT, CDV]","text":"<p>Sorts UDict and returns it. (1)</p> <ol> <li> <p>How UDict is being sorting?</p> <p>Just are being sorting items by keys. <code>u{'b': 1, 'a': 2}</code> -&gt; <code>u{'a': 2, 'b': 1}</code> (sorted)</p> </li> </ol> <p>Warning</p> <p><code>sort()</code> edits UDict. If you don't want to sort UDict use <code>sorted()</code> method instead.</p> <p>Example</p> <pre><code>print(d.sort())\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#sorted-udictkt-vt-cdv","title":"sorted() -&gt; UDict[KT, VT, CDV]","text":"<p>Returns sorted UDict</p> <p>Example</p> <pre><code>print(d.sorted())\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#get","title":"get()","text":"<pre><code>def get(*, key: KT) -&gt; VT | CDV\ndef get(*, key: KT, default: DV) -&gt; VT | DV\ndef get(*, index: int) -&gt; VT | CDV\ndef get(*, index: int, default: DV) -&gt; VT | DV\ndef get(*, value: VT) -&gt; KT | CDV\ndef get(*, value: VT, default: DV) -&gt; KT | DV\n</code></pre> <p>Using more than 1 argument</p> <p>If you use 0 or 2 or 3 of this arguments (<code>key</code>, <code>index</code>, <code>value</code>), method will raise <code>ValueError</code></p> <p>Arguments:</p>","tags":["useful class"]},{"location":"useful_classes/udict/#key-kt","title":"<code>key: KT</code>","text":"<p>UDict value's key to find.</p> <p>Example</p> <pre><code>print(d.get(key='key')) # same that d['key']\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#index-int","title":"<code>index: int</code>","text":"<p>UDict value's index to find</p> <p>Warning</p> <p>Indexes are starting from 1. Index of first element of UDict is 1.</p> <p><code>index</code> argument more than UDict length</p> <p>If you use <code>index</code> argument make sure that <code>index</code> are less than UDict length. Otherwise <code>get()</code> will raise <code>IndexError</code></p> <p>Example</p> <pre><code>print(d.get(index=2)) # second value of UDict\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#value-vt","title":"<code>value: VT</code>","text":"<p>UDict key's value to find</p> <p>Example</p> <pre><code>print(d.get(value=1)) # if d = UDict{'hello': 1}, this will be 'hello'\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#default-dv","title":"<code>default: DV</code>","text":"<p>Default value, if the result was not found. If not provided, then <code>default</code> is <code>UDict.default</code> property.</p> <p>Example</p> <pre><code>d = UDict(hello=1, hi=2, default=-1)\nprint(d.get(key='hell')) # -1\nprint(d.get(key='hell', default=None)) # None\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#is_empty-bool","title":"is_empty() -&gt; bool","text":"<p><code>True</code> if <code>len(UDict) == 0</code> else <code>False</code></p> <p>Example</p> <pre><code>    d = UDict(hello=1)\n    d2 = UDict()\n    print(d.is_empty()) # False\n    print(d2.is_empty()) # True\n</code></pre> <p>Convert UDict to <code>bool</code></p> <p>You can convert UDict to <code>bool</code> or use UDict in <code>if</code> statement. If <code>UDict.is_empty() == True</code> then <code>bool(UDict)</code> is False and by contrast. Same in <code>if</code> because of <code>if x</code> is the equivalent of <code>if bool(x)</code></p> <p>Example</p> <pre><code># d is from code above\nprint(bool(d)) # True\nif d:\n    print(\"d is True\") # d is True\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#magic-methods","title":"Magic methods","text":"<p>Currently, UDict supports all these magic methods:</p>","tags":["useful class"]},{"location":"useful_classes/udict/#__call__func-callablekt-vt-vt-udictkt-vt-cdv","title":"__call__(func: Callable[[KT, VT], VT]) -&gt; UDict[KT, VT, CDV]","text":"<p>Returns new UDict, but all values generated with <code>func</code> function. First argument: key, second: value.</p> <p>Arguments:</p>","tags":["useful class"]},{"location":"useful_classes/udict/#func-kt-vt-vt","title":"<code>func: (KT, VT) -&gt; VT</code>","text":"<p>First argument of function is key, second is value. Returns new value</p> <p>Example</p> <pre><code>def f(k, v):\n    return v * 2\nd = d(f) # multiply all values by 2\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__neg__-udictkt-int-float-cdv","title":"__neg__() -&gt; UDict[KT, int | float, CDV]","text":"<p>Does all values (if they support <code>-</code> operator) to they's opposite numbers.</p> <p>Example</p> <pre><code>d = UDict(hello=1, hi=-2)\nprint(-d) # u{'hello': -1, 'hi': 2}\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__invert__-udictkt-vt-cdv","title":"__invert__() -&gt; UDict[KT, VT, CDV]","text":"<p>The equivalent of <code>reversed()</code></p> <p>Example</p> <pre><code>print(~d)\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__reversed__-udictkt-vt-cdv","title":"__reversed__() -&gt; UDict[KT, VT, CDV]","text":"<p>The equivalent of <code>reversed()</code></p> <p>Example</p> <pre><code>print(reversed(d))\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__getitem__key-kt-int-slice-udictkt-vt-dv-vt","title":"__getitem__(key: KT | int | slice) -&gt; UDict[KT, VT, DV] | VT","text":"<p>Returns value for one key, or UDict for multiply keys provided with slice.</p> <p>Arguments:</p>","tags":["useful class"]},{"location":"useful_classes/udict/#key-kt-int-slice","title":"<code>key: KT | int | slice</code>","text":"<p>Value's key or index to get or values's indexes slice to get.</p> <p>Example</p> <pre><code>print(d['hello'])\n</code></pre> <p>Using indexes and slices</p> <p>You can use indexes and slices in <code>__getitem__()</code>.</p> <p>Indexes starting at 1.</p> <p>Failure</p> <p>Keep in mind that indexes are using after the keys with the given value were not found.</p> <p>Example</p> <p>If you have <code>1</code> key, <code>d[1]</code> syntax will use <code>1</code> how key, not index. If you want to use index in all ways, use <code>get()</code> instead.</p> <p>Example</p> <pre><code>d = UDict(hello=1, hi=9)\nprint(d[2]) # 9\n</code></pre> <p>Slices can be used only with indexes. If slice is provided, method will return part of UDict from <code>start</code> index to <code>end</code> index with <code>step</code>.</p> <p>Example</p> <pre><code>d = UDict(hello=1, hi=3, world=9, ufpy=2)\nprint(d[:3]) # u{'hello': 1, 'hi': 3, 'world': 9}\nprint(d[2:3]) # u{'hi': 3, 'world': 9}\nprint(d[:3:2]) # u{'hello': 1, 'world': 9}\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__setitem__key-kt-int-slice-value-vt-listvt-tuplevt","title":"__setitem__(key: KT | int | slice, value: VT | list[VT] | tuple[VT])","text":"<p>Sets value or values to given key or keys.</p>","tags":["useful class"]},{"location":"useful_classes/udict/#key-kt-int-slice_1","title":"<code>key: KT | int | slice</code>","text":"<p>Value's key or keys to set. This argument is the same with <code>key</code> argument in <code>__getitem__()</code> method</p>","tags":["useful class"]},{"location":"useful_classes/udict/#value-vt-listvt-tuplevt","title":"<code>value: VT | list[VT] | tuple[VT]</code>","text":"<p>Value or values to set.</p> <p>Example</p> <pre><code>d = UDict(hello=2, hi=1)\nd[2] = 'hello'\nprint(d['hi']) # 'hello'\nd[:] = 'hello', 'world'\nprint(d) # u{'hello': 'hello', 'hi': 'world'}\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__delitem__key-kt-int-slice","title":"__delitem__(key: KT | int | slice)","text":"<p>Deletes items with given key or keys</p>","tags":["useful class"]},{"location":"useful_classes/udict/#key-kt-int-slice_2","title":"<code>key: KT | int | slice</code>","text":"<p>Item 's key or keys to delete. This argument is the same with <code>key</code> argument in <code>__getitem__()</code> method</p>","tags":["useful class"]},{"location":"useful_classes/udict/#__len__-int","title":"__len__() -&gt; int","text":"<p>Returns length of UDict</p> <p>Example</p> <p>d = UDict(hello=1, hi=2) print(len(d)) # 2</p>","tags":["useful class"]},{"location":"useful_classes/udict/#__iter__-iteratortuplekt-vt","title":"__iter__() -&gt; Iterator[tuple[KT, VT]]","text":"<p>Iterate UDict. The equivalent of <code>items.__iter__()</code>.</p> <p>Example</p> <pre><code>for k, v in d:\n    print(f\"Key: {k}\\nValue: {v}\") # Prints all keys and its values.\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/udict/#__bool__-bool","title":"__bool__() -&gt; bool","text":"<p>Returns that UDict is not empty. The equivalent of <code>not is_empty()</code></p> <p>Example</p> <pre><code>print(bool(d))\nif d:\n    print(\"D is not empty!\")\n</code></pre>","tags":["useful class"]},{"location":"useful_classes/ustack/","title":"<code>UStack</code> class","text":"","tags":["useful class"]}]}